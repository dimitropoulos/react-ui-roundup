import { join, length, map, pipe, prop, repeat, sortBy } from 'ramda';

import { URL } from '../entities';
import { DesignKit, FrameworkFeaturesById } from '../frameworks';

// eslint-disable-next-line @typescript-eslint/no-use-before-define -- don't see another way to do this without the circular hoist
const line = (line: ContentGroup | string): string => (typeof line === 'string' ? `${line}\n` : lines(line));
export const lines = (input: ContentGroup): string => map(line, input).join('');

export const comment = (text: string) => `<!--${text}-->`;

export const disclaimer = comment(lines([
  '',
  '*'.repeat(80),
  'THIS FILE ENTIRE FILE IS AUTOGENERATED!!!',
  'PLEASE SEE `markdown/generate-readme.ts` and the files in the `frameworks` directory if you would like to make changes :)',
  '*'.repeat(80),
]));

export const disclaim = (input: string[] | string) => lines([
  disclaimer,
  ...(Array.isArray(input) ? input : [input]),
]);

export const h1 = (text: string) => disclaim(`# ${text}`);
export const h2 = (text: string) => disclaim(`## ${text}`);
export const h3 = (text: string) => disclaim(`### ${text}`);
export const h4 = (text: string) => disclaim(`#### ${text}`);
export const paragraph = (text: string) => disclaim(`${text}`);
export const quote = (text: string) => disclaim(`> ${text}`);

export interface LinkInfo {
  text: string;
  href: URL;
}

export const link = ({ text, href }: LinkInfo) => `[${text}](${href})`;
export const inlineCode = (text: string) => `\`${text}\``;
export const checkmark = (value: boolean | undefined) => {
  if (value === undefined) {
    return ':question:';
  }
  if (value) {
    return ':heavy_check_mark:';
  }
  return ':x:';
};
export const row = (data: string[]) => `| ${join(' | ', data)} |`;

export const table = ({ headers, rows }: { headers: string[]; rows: string[][] }) => (
  disclaim([
    row(headers),
    row(repeat('---', length(headers))),
    ...map(row, rows),
  ])
);

export const list = (character: '-' | '1.', indent = 0) => (data: ContentGroup): string => {
  const indentation = '  '.repeat(indent);
  const before = `${indentation}${character} `;
  return map(datum => (Array.isArray(datum) ? (
    list(character, indent + 1)(datum)
  ) : (
    line(`${before}${datum}`)
  )), data).join('');
};

export const unorderedList = list('-');
export const orderedList = list('1.');

export type ContentItem = string;
export type ContentGroup = (ContentGroup | ContentItem)[];

export type LinkInfoGroup = (ContentItem | LinkInfo | LinkInfoGroup)[];

export const tableOfContents = (data: LinkInfoGroup) => {
  const contentGroupify = (linkInfoGroup: LinkInfoGroup): ContentGroup => map(
    item => {
      if (Array.isArray(item)) {
        return contentGroupify(item);
      }
      return typeof item === 'string' ? item : link(item);
    },
    linkInfoGroup,
  );
  return disclaim(unorderedList(contentGroupify(data)));
};

export const websiteHref = 'http://react-ui-roundup.dimitrimitropoulos.com';
export const website = link({ href: websiteHref, text: 'react-ui-roundup.dimitrimitropoulos.com' });

export const stringArray = (input: string[] | null) => (input ? pipe(
  map(inlineCode),
  join(', '),
)(input.sort()) : '');

export const designKits = (designKits: FrameworkFeaturesById['designKits']) => (designKits === false ? checkmark(false) : (
  pipe<DesignKit[], DesignKit[], { text: string; href: string }[], string[], string>(
    sortBy(prop('type')),
    map(({ type, href }) => ({ href, text: type })),
    map(link),
    join(', '),
  )(designKits)
));

export const themer = (themer: FrameworkFeaturesById['themer']) => (themer === false ? checkmark(themer) : (
  link({ href: themer, text: 'Link' })
));

export const criteria = (items: [string, string][]) => lines([
  h4('Criteria'),
  ...map(([name, description]) => `- ${inlineCode(name)}: ${description}`, items),
]);
